{"trial_id": "0001", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "conv1_filters", "default": null, "conditions": [], "min_value": 16, "max_value": 64, "step": 16, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv1_kernel", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv1_reg", "default": 0.001, "conditions": [], "values": [0.001, 0.01, 0.1], "ordered": true}}, {"class_name": "Int", "config": {"name": "conv2_filters", "default": null, "conditions": [], "min_value": 16, "max_value": 64, "step": 16, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv2_kernel", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2_reg", "default": 0.001, "conditions": [], "values": [0.001, 0.01, 0.1], "ordered": true}}, {"class_name": "Int", "config": {"name": "conv3_filters", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv3_kernel", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Int", "config": {"name": "dense_units", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.01, "conditions": [], "values": [0.01, 0.001, 0.0001], "ordered": true}}], "values": {"conv1_filters": 48, "conv1_kernel": 3, "conv1_reg": 0.01, "conv2_filters": 32, "conv2_kernel": 5, "conv2_reg": 0.1, "conv3_filters": 128, "conv3_kernel": 3, "dense_units": 96, "dropout_rate": 0.2, "learning_rate": 0.01, "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 2, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 261, in _run_and_update_trial\n    tuner_utils.convert_to_metrics_dict(\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\tuner_utils.py\", line 225, in convert_to_metrics_dict\n    [convert_to_metrics_dict(elem, objective) for elem in results]\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\tuner_utils.py\", line 225, in <listcomp>\n    [convert_to_metrics_dict(elem, objective) for elem in results]\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\tuner_utils.py\", line 238, in convert_to_metrics_dict\n    best_value, _ = _get_best_value_and_best_epoch_from_history(\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\tuner_utils.py\", line 209, in _get_best_value_and_best_epoch_from_history\n    objective_value = objective.get_value(metrics)\n  File \"C:\\Users\\Anthony\\anaconda3\\lib\\site-packages\\keras_tuner\\engine\\objective.py\", line 57, in get_value\n    return logs[self.name]\nKeyError: 'val_accuracy'\n"}